# -*- coding: utf-8 -*-
"""EigenVectorsValues .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18cFYU32dDQrerQ-5_RpnVvqe-AxVm7-8
"""

import numpy as np

A = [[6, 1, -1],
     [0, 7, 0],
     [3, -1, 2]]

def get_dimensions(matrix):
    return [len(matrix), len(matrix[0])]

def identity_matrix(dimensions):
    return [[1 if i == j else 0 for j in range(dimensions[1])] for i in range(dimensions[0])]

def characteristic_equation(matrix):
    dims = get_dimensions(matrix)
    I = identity_matrix(dims)
    return [[[matrix[i][j], -I[i][j]] for j in range(dims[1])] for i in range(dims[0])]

def list_multiply(list1, list2):
    result = [0] * (len(list1) + len(list2) - 1)
    for i in range(len(list1)):
        for j in range(len(list2)):
            result[i + j] += list1[i] * list2[j]
    return result

def list_add(list1, list2, sub=1):
    return [i + (sub * j) for i, j in zip(list1, list2)]

def determinant_equation(matrix, excluded=1):
    dims = get_dimensions(matrix)
    if dims == [2, 2]:
        tmp = list_add(list_multiply(matrix[0][0], matrix[1][1]),
                       list_multiply(matrix[0][1], matrix[1][0]), sub=-1)
        return list_multiply(tmp, excluded)
    else:
        new_matrices = []
        excluded_values = []
        exclude_row = 0
        for exclude_column in range(dims[1]):
            tmp = []
            excluded_values.append(matrix[exclude_row][exclude_column])
            for row in range(1, dims[0]):
                tmp_row = []
                for column in range(dims[1]):
                    if column != exclude_column:
                        tmp_row.append(matrix[row][column])
                tmp.append(tmp_row)
            new_matrices.append(tmp)
        determinants = [determinant_equation(new_matrices[j], excluded_values[j])
                        for j in range(len(new_matrices))]
        dt_equation = [sum(i) for i in zip(*determinants)]
        return dt_equation

def find_eigenvalues(matrix):
    eq = characteristic_equation(matrix)
    poly = determinant_equation(eq)
    return np.roots(poly[::-1])

eigenvalues = find_eigenvalues(A)
print("Hesaplanan Özdeğerler:", eigenvalues)

import numpy as np

A = np.array([[6, 1, -1],
              [0, 7, 0],
              [3, -1, 2]])

eigenvalues, eigenvectors = np.linalg.eig(A)

print("NumPy ile Özdeğerler:")
print(eigenvalues)